//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "AlyaFilon.InstClient") ?? Bundle.main
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Billabong.ttf`.
    static let billabongTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Billabong", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "Billabong", withExtension: "ttf")`
    static func billabongTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.billabongTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `Billabong`.
    static let billabong = Rswift.FontResource(fontName: "Billabong")
    
    /// `UIFont(name: "Billabong", size: ...)`
    static func billabong(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: billabong, size: size)
    }
    
    static func validate() throws {
      if R.font.billabong(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Billabong' could not be loaded, is 'Billabong.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 21 images.
  struct image {
    /// Image `commentIcon`.
    static let commentIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "commentIcon")
    /// Image `exploreItemSelected`.
    static let exploreItemSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "exploreItemSelected")
    /// Image `exploreItem`.
    static let exploreItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "exploreItem")
    /// Image `gridIconSelected`.
    static let gridIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridIconSelected")
    /// Image `gridIcon`.
    static let gridIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "gridIcon")
    /// Image `homeIconSelected`.
    static let homeIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIconSelected")
    /// Image `homeIcon`.
    static let homeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "homeIcon")
    /// Image `likeIconSelected`.
    static let likeIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeIconSelected")
    /// Image `likeIcon`.
    static let likeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "likeIcon")
    /// Image `line`.
    static let line = Rswift.ImageResource(bundle: R.hostingBundle, name: "line")
    /// Image `listIconSelected`.
    static let listIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "listIconSelected")
    /// Image `listIcon`.
    static let listIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "listIcon")
    /// Image `locationItemSelected`.
    static let locationItemSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationItemSelected")
    /// Image `locationItem`.
    static let locationItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationItem")
    /// Image `markItemSelected`.
    static let markItemSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "markItemSelected")
    /// Image `markItem`.
    static let markItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "markItem")
    /// Image `moreButton`.
    static let moreButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "moreButton")
    /// Image `profileIconSelected`.
    static let profileIconSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIconSelected")
    /// Image `profileIcon`.
    static let profileIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "profileIcon")
    /// Image `selectiondIbdicator`.
    static let selectiondIbdicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectiondIbdicator")
    /// Image `settingsItem`.
    static let settingsItem = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsItem")
    
    /// `UIImage(named: "commentIcon", bundle: ..., traitCollection: ...)`
    static func commentIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exploreItem", bundle: ..., traitCollection: ...)`
    static func exploreItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exploreItem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exploreItemSelected", bundle: ..., traitCollection: ...)`
    static func exploreItemSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exploreItemSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gridIcon", bundle: ..., traitCollection: ...)`
    static func gridIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gridIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gridIconSelected", bundle: ..., traitCollection: ...)`
    static func gridIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gridIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeIcon", bundle: ..., traitCollection: ...)`
    static func homeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "homeIconSelected", bundle: ..., traitCollection: ...)`
    static func homeIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "likeIcon", bundle: ..., traitCollection: ...)`
    static func likeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "likeIconSelected", bundle: ..., traitCollection: ...)`
    static func likeIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.likeIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "line", bundle: ..., traitCollection: ...)`
    static func line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "listIcon", bundle: ..., traitCollection: ...)`
    static func listIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "listIconSelected", bundle: ..., traitCollection: ...)`
    static func listIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationItem", bundle: ..., traitCollection: ...)`
    static func locationItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationItem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "locationItemSelected", bundle: ..., traitCollection: ...)`
    static func locationItemSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationItemSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "markItem", bundle: ..., traitCollection: ...)`
    static func markItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markItem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "markItemSelected", bundle: ..., traitCollection: ...)`
    static func markItemSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.markItemSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "moreButton", bundle: ..., traitCollection: ...)`
    static func moreButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moreButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileIcon", bundle: ..., traitCollection: ...)`
    static func profileIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "profileIconSelected", bundle: ..., traitCollection: ...)`
    static func profileIconSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileIconSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "selectiondIbdicator", bundle: ..., traitCollection: ...)`
    static func selectiondIbdicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectiondIbdicator, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settingsItem", bundle: ..., traitCollection: ...)`
    static func settingsItem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsItem, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `Actions`.
    static let actions = _R.nib._Actions()
    /// Nib `BioCell`.
    static let bioCell = _R.nib._BioCell()
    /// Nib `Comments`.
    static let comments = _R.nib._Comments()
    /// Nib `PhotoViewCell`.
    static let photoViewCell = _R.nib._PhotoViewCell()
    /// Nib `Photo`.
    static let photo = _R.nib._Photo()
    /// Nib `PhotosCell`.
    static let photosCell = _R.nib._PhotosCell()
    /// Nib `ProfilesListCell`.
    static let profilesListCell = _R.nib._ProfilesListCell()
    /// Nib `PublicationCell`.
    static let publicationCell = _R.nib._PublicationCell()
    /// Nib `Thumbnail`.
    static let thumbnail = _R.nib._Thumbnail()
    /// Nib `Username`.
    static let username = _R.nib._Username()
    
    /// `UINib(name: "Actions", in: bundle)`
    static func actions(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.actions)
    }
    
    /// `UINib(name: "BioCell", in: bundle)`
    static func bioCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bioCell)
    }
    
    /// `UINib(name: "Comments", in: bundle)`
    static func comments(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.comments)
    }
    
    /// `UINib(name: "Photo", in: bundle)`
    static func photo(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photo)
    }
    
    /// `UINib(name: "PhotoViewCell", in: bundle)`
    static func photoViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoViewCell)
    }
    
    /// `UINib(name: "PhotosCell", in: bundle)`
    static func photosCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photosCell)
    }
    
    /// `UINib(name: "ProfilesListCell", in: bundle)`
    static func profilesListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profilesListCell)
    }
    
    /// `UINib(name: "PublicationCell", in: bundle)`
    static func publicationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.publicationCell)
    }
    
    /// `UINib(name: "Thumbnail", in: bundle)`
    static func thumbnail(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.thumbnail)
    }
    
    /// `UINib(name: "Username", in: bundle)`
    static func username(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.username)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ActionsCell`.
    static let actionsCell: Rswift.ReuseIdentifier<ActionsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ActionsCell")
    /// Reuse identifier `BioCell`.
    static let bioCell: Rswift.ReuseIdentifier<BioCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "BioCell")
    /// Reuse identifier `CommentsCell`.
    static let commentsCell: Rswift.ReuseIdentifier<CommentsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CommentsCell")
    /// Reuse identifier `PhotoViewCell`.
    static let photoViewCell: Rswift.ReuseIdentifier<PhotoViewCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoViewCell")
    /// Reuse identifier `ThumbnailCell`.
    static let thumbnailCell: Rswift.ReuseIdentifier<ThumbnailCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ThumbnailCell")
    /// Reuse identifier `UsernameCell`.
    static let usernameCell: Rswift.ReuseIdentifier<UsernameCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "UsernameCell")
    /// Reuse identifier `photoCell`.
    static let photoCell: Rswift.ReuseIdentifier<PhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "photoCell")
    /// Reuse identifier `photosCell`.
    static let photosCell: Rswift.ReuseIdentifier<PhotosCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "photosCell")
    /// Reuse identifier `profileListCell`.
    static let profileListCell: Rswift.ReuseIdentifier<ProfilesListTableViewCell> = Rswift.ReuseIdentifier(identifier: "profileListCell")
    /// Reuse identifier `publicationCell`.
    static let publicationCell: Rswift.ReuseIdentifier<PublicationCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "publicationCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    /// Storyboard `Camera`.
    static let camera = _R.storyboard.camera()
    /// Storyboard `Explore`.
    static let explore = _R.storyboard.explore()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Notifications`.
    static let notifications = _R.storyboard.notifications()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `ProfilesList`.
    static let profilesList = _R.storyboard.profilesList()
    /// Storyboard `Publication`.
    static let publication = _R.storyboard.publication()
    /// Storyboard `TabBar`.
    static let tabBar = _R.storyboard.tabBar()
    
    /// `UIStoryboard(name: "Camera", bundle: ...)`
    static func camera(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.camera)
    }
    
    /// `UIStoryboard(name: "Explore", bundle: ...)`
    static func explore(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.explore)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Notifications", bundle: ...)`
    static func notifications(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notifications)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "ProfilesList", bundle: ...)`
    static func profilesList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profilesList)
    }
    
    /// `UIStoryboard(name: "Publication", bundle: ...)`
    static func publication(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.publication)
    }
    
    /// `UIStoryboard(name: "TabBar", bundle: ...)`
    static func tabBar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.tabBar)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PhotoViewCell.validate()
      try _Actions.validate()
      try _Username.validate()
    }
    
    struct _Actions: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ActionsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ActionsCell"
      let name = "Actions"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ActionsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ActionsCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "commentIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'commentIcon' is used in nib 'Actions', but couldn't be loaded.") }
        if UIKit.UIImage(named: "likeIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'likeIcon' is used in nib 'Actions', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BioCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = BioCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BioCell"
      let name = "BioCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BioCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BioCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Comments: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CommentsCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "CommentsCell"
      let name = "Comments"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CommentsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommentsCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Photo: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhotoCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "photoCell"
      let name = "Photo"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = PhotoViewCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PhotoViewCell"
      let name = "PhotoViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotoViewCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotoViewCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "listIconSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listIconSelected' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "markItem") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'markItem' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gridIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridIcon' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "listIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'listIcon' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "markItemSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'markItemSelected' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationItemSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationItemSelected' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationItem") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'locationItem' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gridIconSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gridIconSelected' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line' is used in nib 'PhotoViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _PhotosCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PhotosCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "photosCell"
      let name = "PhotosCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotosCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotosCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProfilesListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProfilesListTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "profileListCell"
      let name = "ProfilesListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfilesListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfilesListTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PublicationCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PublicationCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "publicationCell"
      let name = "PublicationCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PublicationCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PublicationCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Thumbnail: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ThumbnailCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ThumbnailCell"
      let name = "Thumbnail"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ThumbnailCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ThumbnailCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _Username: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = UsernameCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "UsernameCell"
      let name = "Username"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UsernameCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UsernameCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "moreButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'moreButton' is used in nib 'Username', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try profilesList.validate()
      try login.validate()
      try publication.validate()
      try profile.validate()
    }
    
    struct camera: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Camera"
      
      fileprivate init() {}
    }
    
    struct explore: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Explore"
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = HomeNavigationController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<LoginViewController>(identifier: "login")
      let name = "Login"
      
      func login(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      static func validate() throws {
        if _R.storyboard.login().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct notifications: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "Notifications"
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileNavigationController
      
      let bundle = R.hostingBundle
      let name = "Profile"
      let profile = StoryboardViewControllerResource<ProfileViewController>(identifier: "Profile")
      
      func profile(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profile)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "settingsItem") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settingsItem' is used in storyboard 'Profile', but couldn't be loaded.") }
        if _R.storyboard.profile().profile() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profile' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profilesList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "ProfilesList"
      let profilesList = StoryboardViewControllerResource<ProfilesListViewController>(identifier: "ProfilesList")
      
      func profilesList(_: Void = ()) -> ProfilesListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profilesList)
      }
      
      static func validate() throws {
        if _R.storyboard.profilesList().profilesList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profilesList' could not be loaded from storyboard 'ProfilesList' as 'ProfilesListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct publication: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PublicationViewController
      
      let bundle = R.hostingBundle
      let name = "Publication"
      let publication = StoryboardViewControllerResource<PublicationViewController>(identifier: "Publication")
      
      func publication(_: Void = ()) -> PublicationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: publication)
      }
      
      static func validate() throws {
        if _R.storyboard.publication().publication() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'publication' could not be loaded from storyboard 'Publication' as 'PublicationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct tabBar: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "TabBar"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}